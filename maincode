```c
#include <stdio.h>

void checkPalindrome(int num);
void checkArmstrong(int num);
void sortArray(int arr[], int size);
int binarySearch(int arr[], int size, int key);

int main() {
    int choice;
    int num1, num2, key;
    int arr[100], size;
    int result;

    // Display the menu
    printf("Select an operation:\n");
    printf("1. Addition\n");
    printf("2. Subtraction\n");
    printf("3. Multiplication\n");
    printf("4. Division\n");
    printf("5. Check Palindrome\n");
    printf("6. Check Armstrong Number\n");
    printf("7. Sort an Array\n");
    printf("8. Binary Search\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            // Get the input numbers
            printf("Enter two integers: ");
            scanf("%d %d", &num1, &num2);
            result = num1 + num2;
            printf("Result: %d\n", result);
            break;
        case 2:
            printf("Enter two integers: ");
            scanf("%d %d", &num1, &num2);
            result = num1 - num2;
            printf("Result: %d\n", result);
            break;
        case 3:
            printf("Enter two integers: ");
            scanf("%d %d", &num1, &num2);
            result = num1 * num2;
            printf("Result: %d\n", result);
            break;
        case 4:
            printf("Enter two integers: ");
            scanf("%d %d", &num1, &num2);
            if (num2 != 0) {
                result = num1 / num2;
                printf("Result: %d\n", result);
            } else {
                printf("Error: Division by zero is not allowed.\n");
            }
            break;
        case 5:
            printf("Enter an integer: ");
            scanf("%d", &num1);
            checkPalindrome(num1);
            break;
        case 6:
            printf("Enter an integer: ");
            scanf("%d", &num1);
            checkArmstrong(num1);
            break;
        case 7:
            printf("Enter the size of the array: ");
            scanf("%d", &size);
            printf("Enter the elements of the array:\n");
            for (int i = 0; i < size; i++) {
                scanf("%d", &arr[i]);
            }
            sortArray(arr, size);
            printf("Sorted Array: ");
            for (int i = 0; i < size; i++) {
                printf("%d ", arr[i]);
            }
            printf("\n");
            break;
        case 8:
            printf("Enter the size of the array: ");
            scanf("%d", &size);
            printf("Enter the elements of the sorted array:\n");
            for (int i = 0; i < size; i++) {
                scanf("%d", &arr[i]);
            }
            printf("Enter the key to search: ");
            scanf("%d", &key);
            result = binarySearch(arr, size, key);
            if (result != -1) {
                printf("Element found at index: %d\n", result);
            } else {
                printf("Element not found in the array.\n");
            }
            break;
        default:
            printf("Invalid choice.\n");
            break;
    }

    return 0;
}

void checkPalindrome(int num) {
    int original = num, reversed = 0, remainder;

    while (num != 0) {
        remainder = num % 10;
        reversed = reversed * 10 + remainder;
        num /= 10;
    }

    if (original == reversed) {
        printf("%d is a palindrome.\n", original);
    } else {
        printf("%d is not a palindrome.\n", original);
    }
}

void checkArmstrong(int num) {
    int original = num, remainder, result = 0;

    while (num != 0) {
        remainder = num % 10;
        result += remainder * remainder * remainder;
        num /= 10;
    }

    if (original == result) {
        printf("%d is an Armstrong number.\n", original);
    } else {
        printf("%d is not an Armstrong number.\n", original);
    }
}

void sortArray(int arr[], int size) {
    int temp;
    for (int i = 0; i < size - 1; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] > arr[j]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}

int binarySearch(int arr[], int size, int key) {
    int low = 0, high = size - 1, mid;

    while (low <= high) {
        mid = (low + high) / 2;
        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return -1;
}
